# MAX719-driven LED matrix functions library
# 2015, Ismail Uddin
# www.scienceexposure.com
# www.github.com/ismailuddin/raspberrypi/led-matrix/


import max7219.led as LED
import numpy as np
import time

class MatrixFunctions(object):
	def __init__(self):
		self.device = LED.matrix()
		self.device.brightness(5)

	def updateMatrix(self, array, transition=0, update=False):
		"""
		Function to read in a NumPy 1-D array or 2-D matrix, and update
		LEDs on LED matrix.

		---

		**Matrix format:
		0				Turn LED off
		1				Turn LED on
		Data type:		Integer values
		Order of data:	From top left hand corner, row by row, till bottom right hand corner

		**Arguments:
		array			1-D array / 2-D NumPy matrix
		update 			Set by default to False. Set to True to update LEDs, one by one, creating a transition effect.
		transition		Integer value in milliseconds. Only active if 'update' argument set to True.
						Specifies time delay for updating LEDs in matrix.
		"""
		if 'matrix' in str(type(array)):
			mat = array
		else:
			mat = np.matrix(array)
		height = mat.shape[0]
		width = mat.shape[1]
		for i in range(0, height):
			for k in range(0, width):
				self.device.pixel(k, i, mat[i, k], redraw=update)
				time.sleep(transition)
		self.device.flush()

	def readMatrix(self, filename, output='list'):
		"""
		Reads file generated by 'Generate Matrix' button in LED GUI Controller
		and outputs a NumPy array or matrix (specified by second argument) that
		can be used for the 'updateMatrix' function.

		---

		**Arguments:
		filename		String or variable, directing to file.
		output 			Specify 'list' to output a 1-D NumPy array
								'matrix' to output a 8*8 2-D NumPy matrix
		"""
		a = np.genfromtxt(str(filename), delimiter=',')
		if str(output) == 'list':
			return a[:-1]
		else:
			m = a[:-1].reshape(8, 8)
			return m

	def setOrientation(self,number):
		"""
		Alias function for orientation() function from 'max7219' module.

		**Arguments:
		number			Integer value for phyiscal orientation in degrees of
						matrix. Accepted values: 0, 90, 180, 270.
		"""
		self.device.orientation(number)

	def rotationAnim(self,matrix,delay=0.25,transition=0,redraw=False):
		"""
		Function to create a rotation animation on the LED matrix.

		**Arguments:
		matrix 			NumPy 2-D matrix, shape: 8x8
		delay			Float value, default at 0.25. Specifies the time delay between rotations.
		transition		Alias to 'transition' argument in 'updateMatrix' function
		redraw 			Alias to 'redraw' argument in 'updateMatrix' function
		"""
		print("Press Ctrl+C to stop animation.")
		i = 0
		while True:
			i += 1
			rot = np.rot90(matrix, i)
			self.updateMatrix(rot,transition,redraw)
			time.sleep(delay)

